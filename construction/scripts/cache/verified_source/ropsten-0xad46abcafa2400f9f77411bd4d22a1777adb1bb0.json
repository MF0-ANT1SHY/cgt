{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.24; // Specify compiler version\r\n\r\n// Init remittance contract\r\ncontract Remittance {\r\n    uint withdrawalDelay = 60; // Time before withdrawal can be made\r\n\r\n    struct Deposit {\r\n        address Sender;\r\n        uint256 Balance;\r\n        uint256 Deadline;\r\n        bytes32 PublicKey;\r\n        address Claimant;\r\n        string PrivateKey1;\r\n    }\r\n\r\n    mapping (bytes32 => Deposit) Deposits; // Deposits by public key\r\n\r\n    event deposited(address sender, bytes32 publicKey, uint amount); // Log deposit\r\n    event claimed(address claimant, address claimAddress, bytes32 publicKey, uint amount); // Log claim\r\n    event withdrew(address withdrawer, uint blockTime, uint amount); // Log withdrawal\r\n    \r\n    function deposit(bytes32 _publicKey) public payable {\r\n        require(Deposits[_publicKey].Balance == 0, \"Already deposit with public key\"); // Check not existing\r\n        Deposits[_publicKey] = Deposit(msg.sender, msg.value, block.number + withdrawalDelay, _publicKey, 0, \"\"); // Set deposit\r\n\r\n        emit deposited(msg.sender, _publicKey, msg.value); // Send deposit event\r\n    }\r\n\r\n    function claim(bytes32 _publicKey, string _privateKey1) public {\r\n        require(msg.sender != Deposits[_publicKey].Sender, \"Cannot claim own balance (request a withdrawal instead).\"); // Check isn't issuer\r\n\r\n        Deposits[_publicKey].Claimant = msg.sender; // Set claimant\r\n        Deposits[_publicKey].PrivateKey1 = _privateKey1; // Set private key 1\r\n    }\r\n\r\n    function approveClaim(bytes32 _publicKey, string _privateKey2) public {\r\n        require(Deposits[_publicKey].Claimant != msg.sender, \"Cannot approve own claim.\"); // Check isn't claimant\r\n        require(Deposits[_publicKey].Sender == msg.sender, \"Issuer must approve all claims.\"); // Check is issuer\r\n        require(keccak256(abi.encodePacked(Deposits[_publicKey].PrivateKey1, _privateKey2)) == Deposits[_publicKey].PublicKey, \"Invalid private keys.\");\r\n\r\n        uint balance = Deposits[_publicKey].Balance; // Store balance\r\n\r\n        emit claimed(msg.sender, Deposits[_publicKey].Sender, Deposits[_publicKey].PublicKey, Deposits[_publicKey].Balance);\r\n\r\n        Deposits[_publicKey].Balance = 0; // Reset balance\r\n\r\n        msg.sender.transfer(balance); // Transfer to specified claim address\r\n    }\r\n\r\n    function withdraw(bytes32 _publicKey) public {\r\n        uint balance = Deposits[_publicKey].Balance; // Store balance\r\n\r\n        require(block.number >= Deposits[_publicKey].Deadline, \"Balance is not yet eligible for withdrawal.\"); // Check is ready for withdrawal\r\n        require(msg.sender == Deposits[_publicKey].Sender, \"Non-owner cannot withdraw.\"); // Check owner is requesting withdrawal\r\n\r\n        emit withdrew(msg.sender, block.number, Deposits[_publicKey].Balance); // Send withdrawal event\r\n\r\n        Deposits[_publicKey].Balance = 0; // Rest balance\r\n\r\n        msg.sender.transfer(balance); // Transfer ether\r\n    }\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_publicKey\",\"type\":\"bytes32\"},{\"name\":\"_privateKey1\",\"type\":\"string\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_publicKey\",\"type\":\"bytes32\"},{\"name\":\"_privateKey2\",\"type\":\"string\"}],\"name\":\"approveClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_publicKey\",\"type\":\"bytes32\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_publicKey\",\"type\":\"bytes32\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"publicKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"claimant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"claimAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"publicKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"blockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrew\",\"type\":\"event\"}]", "ContractName": "Remittance", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://3a52b415868219c7c6f16a9a87bcca124c84392be475744565de427c74f5b1b8"}]}