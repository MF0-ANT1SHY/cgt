{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.18;\r\n\r\ncontract SingularityTest20\r\n{\r\n    struct _Tx {\r\n        address txuser;\r\n        uint txvalue;\r\n    }\r\n    \r\n    mapping(address => uint) balance;\r\n    \r\n    _Tx[] public Tx;\r\n    uint public counter;\r\n    uint public curentBlock;\r\n    \r\n    //Owner address of Smart Contract\r\n    address owner;\r\n    \r\n    //Check if the user is the owner\r\n    modifier onlyowner\r\n    {\r\n        require (msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    //initialization of the contract\r\n    function SingularityTest20() {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    //if payment are resave\r\n    function() public {\r\n        uint value = msg.value;\r\n        //if sole is greater than or equal to 0,015 ETH else is refund\r\n        if (value >= 15000000000000000 wei){\r\n            //Start Sort function\r\n            Sort();\r\n        }else{\r\n            //refound\r\n            msg.sender.transfer(value);\r\n        }\r\n        \r\n        //if sender is owner of samrt contract \r\n        if (msg.sender == owner )\r\n        {\r\n            //if sole is greater than or equal to 0,027 ETH\r\n            if (value >= 2700000000000000 wei){\r\n                //Start ReFund function\r\n                ReFund();\r\n            }else{\r\n                //Start Payment (Count function)\r\n                curentBlock = block.number;\r\n                Count();\r\n            }\r\n        }\r\n    }\r\n    \r\n    //Payment Function\r\n    function Sort() internal\r\n    {\r\n        //Fee of 10% for the dev\r\n        uint feecounter;\r\n            feecounter+=(msg.value/100)*20;\r\n\t        owner.transfer(feecounter);\r\n\t        feecounter=0;\r\n\t   //Add user in the list of membres\r\n\t   if(Tx[counter].txuser != msg.sender){\r\n\t       balance[msg.sender] = msg.value; \r\n\t       uint txcounter=Tx.length;\r\n    \t   counter=Tx.length;\r\n    \t   Tx.length++;\r\n    \t   Tx[txcounter].txuser=msg.sender;\r\n    \t   Tx[txcounter].txvalue=msg.value; \r\n\t   }else if(Tx[counter].txuser == msg.sender){\r\n\t       balance[msg.sender] = (balance[msg.sender] + msg.value);\r\n\t   }\r\n    }\r\n    \r\n\r\n    \r\n    //Send 4% of fund for all membres \r\n    function Count() onlyowner public {\r\n        while (counter>0) {\r\n            Tx[counter].txuser.transfer((balance[Tx[counter].txuser]/100)*4);\r\n            counter-=1;\r\n            curentBlock = block.number;\r\n        }\r\n    }\r\n    \r\n    //Send refund membres function\r\n    function ReFund() onlyowner public {\r\n        while (counter>0) {\r\n            Tx[counter].txuser.transfer(balance[Tx[counter].txuser]);\r\n            counter-=1;\r\n        }\r\n    }\r\n\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[],\"name\":\"ReFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Tx\",\"outputs\":[{\"name\":\"txuser\",\"type\":\"address\"},{\"name\":\"txvalue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curentBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Count\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"}]", "ContractName": "SingularityTest20", "CompilerVersion": "v0.4.18+commit.9cf6e910", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://9302348c2356642a8ca45be07a0385dd8eaaee7a9d7497b9d84d14f9325cda61"}]}