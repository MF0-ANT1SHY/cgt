{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) { return 0; }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract Manageable {\r\n  address public owner;\r\n  bool public contractLock;\r\n  uint256 price = 1000000000000000000;\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  event ContractLockChanged(address admin, bool state);\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n    contractLock = false;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  modifier isUnlocked() {\r\n    require(!contractLock);\r\n    _;\r\n  }\r\n\r\n  function transferOwner(address _newOwner) public onlyOwner {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n\r\n  function setContractLock(bool setting) public onlyOwner {\r\n    contractLock = setting;\r\n    emit ContractLockChanged(msg.sender, setting);\r\n  }\r\n\r\n  function _addrNotNull(address _to) internal pure returns (bool) {\r\n    return(_to != address(0));\r\n  }\r\n}\r\n\r\n\r\ncontract InvitherB is Manageable {\r\n  using SafeMath for uint256;\r\n  using SafeMath for int256;\r\n\r\n/********************************************** EVENTS **********************************************/\r\n  event AddUser(address user_address,  int256 user_id);\r\n  event Reward(address user_address, int256 user_id, uint256 reward_amount);\r\n/****************************************************************************************************/\r\n\r\n/********************************************** STRUCTS *********************************************/\r\n  struct User {\r\n    address user_address;\r\n    int256 parent_id;\r\n    int256[5] childs;\r\n    bool isFull;\r\n  }\r\n\r\n/*********************************************** VARS ***********************************************/\r\n\r\n  mapping(int256 => User) private usersMap;\r\n  bool initDone = false;\r\n  int256 userCount = 0;\r\n\r\n  address commissioner = 0xfe9313E171C441db91E3604F75cA58f13AA0Cb23;\r\n/****************************************************************************************************/\r\n\r\n\r\n  function init() public onlyOwner {\r\n    int256 child = -1;\r\n    usersMap[0] = User({user_address: owner, parent_id:child, childs:[child, child, child, child, child], isFull: false});  // solhint-disable-line max-line-length\r\n    userCount=1;\r\n  }\r\n\r\n  function _addUser(address user_address) private returns (int256) {\r\n    for (int256 i=0; i<userCount; i++){\r\n      if (!usersMap[i].isFull){\r\n        for (uint256 j=0; j<5; j++){\r\n          if (usersMap[i].childs[j] == -1){\r\n            usersMap[i].childs[j] == userCount;\r\n            int256 child = -1;\r\n            usersMap[userCount] = User({user_address: user_address, parent_id:i, childs:[child, child, child, child, child], isFull: false});\r\n            userCount++;\r\n            if (j == 4) usersMap[i].isFull = true;\r\n            return userCount-1;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  function getRewarder(int256 parent_id) private view returns (int256) {\r\n    int256 i = 0;\r\n    for (i = 0; i < 4; i++){\r\n      parent_id = usersMap[parent_id].parent_id;\r\n      if (parent_id == -1){\r\n        return -1;\r\n      }\r\n    }\r\n    return parent_id;\r\n  }\r\n\r\n  function getUserCount() public view returns (int256 _usercount){\r\n    _usercount = userCount;\r\n  }\r\n  \r\n  function getUser(int256 _user_id) public view returns (address user_address, int256 parent_id, int256[5] childs, bool isFull){\r\n    User memory _user = usersMap[_user_id];\r\n    user_address = _user.user_address;\r\n    parent_id = _user.parent_id;\r\n    childs = _user.childs;\r\n    isFull = _user.isFull;    \r\n  }\r\n  \r\n  function addUser(int256 parent_id) public payable isUnlocked{\r\n    require(parent_id < userCount);\r\n    require(msg.value >= price);\r\n    uint256 i = 0;\r\n    if (!usersMap[parent_id].isFull){\r\n      for (i=0; i<5; i++){\r\n        if (usersMap[parent_id].childs[i] == -1){\r\n          usersMap[parent_id].childs[i] = userCount;\r\n          int256 child = -1;\r\n          usersMap[userCount] = User({user_address: msg.sender, parent_id:parent_id, childs:[child, child, child, child, child], isFull: false});\r\n          userCount++;\r\n          if (i == 4) usersMap[parent_id].isFull = true;\r\n          emit AddUser(msg.sender, userCount-1);\r\n          break;\r\n        }\r\n      }\r\n    } \r\n  }\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"setting\",\"type\":\"bool\"}],\"name\":\"setContractLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUserCount\",\"outputs\":[{\"name\":\"_usercount\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user_id\",\"type\":\"int256\"}],\"name\":\"getUser\",\"outputs\":[{\"name\":\"user_address\",\"type\":\"address\"},{\"name\":\"parent_id\",\"type\":\"int256\"},{\"name\":\"childs\",\"type\":\"int256[5]\"},{\"name\":\"isFull\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"parent_id\",\"type\":\"int256\"}],\"name\":\"addUser\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"user_id\",\"type\":\"int256\"}],\"name\":\"AddUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"user_id\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"reward_amount\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"ContractLockChanged\",\"type\":\"event\"}]", "ContractName": "InvitherB", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://8b4d396eb124264659d141de2c8898de466dad14047b47c6f794dda41638c034"}]}